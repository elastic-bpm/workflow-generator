library(jsonlite)
library(ggplot2)
library( ReporteRs )
library(fBasics)
saveMyPlot <- function(p, name) {
print(p)
dev.copy(png, paste(name,".png", sep=""))
dev.off()
Sys.sleep(0)
print(p)
dev.copy(win.metafile, paste(name,".metafile", sep=""))
dev.off()
Sys.sleep(0)
}
setwd("C:/Users/Johannes/Projects/results/output/201701041245")
logDF <- fromJSON("logstash.json", flatten = TRUE)
logDF$timeEpoch <- as.numeric( logDF$`fields.@timestamp`)
logDF$time <- as.POSIXct(logDF$timeEpoch/1000, origin="1970-01-01", tz="Europe/Amsterdam")
workerStart <- logDF[grep("worker:start", logDF$"_source.message", ignore.case=T),]
workerDone <- logDF[grep("worker:done", logDF$"_source.message", ignore.case=T),]
workflowInfo <- logDF[grep("workflow:info", logDF$"_source.message", ignore.case=T),]
workflowInfo$`_source.message`
workflowStats <- logDF[grep("workflow:stats", logDF$"_source.message", ignore.case=T),]
workflowStats$wfID <- substring(workflowStats$`_source.message`, 16, 51)
workflowStats$json <- substring(workflowStats$`_source.message`, 53)
makespan <- numeric(nrow(workflowStats))
wait_time <- numeric(nrow(workflowStats))
response_time <- numeric(nrow(workflowStats))
human_time <- numeric(nrow(workflowStats))
system_time <- numeric(nrow(workflowStats))
for (i in 1:nrow(workflowStats)){
jsonStats = fromJSON(workflowStats[i,]$json)
makespan[i] <- jsonStats$makespan
wait_time[i] <- jsonStats$wait_time
response_time[i] <- jsonStats$response_time
human_time[i] <- jsonStats$human_time
system_time[i] <- jsonStats$system_time
}
wfDF <- data.frame(makespan, wait_time, response_time, human_time, system_time)
#basicStats(wfDF)
boxplot(wfDF)
setwd("C:/Users/Johannes/Projects/results/output/201701041245")
logDF <- fromJSON("logstash.json", flatten = TRUE)
logDF$timeEpoch <- as.numeric( logDF$`fields.@timestamp`)
setwd("C:/Users/Johannes/Projects/results/output/201701041245")
setwd("C:/Users/Johannes/Projects/results/output/201701041245")
library(cherry)
install.packages("cherry")
library(cherry)
pval <- c(0.1,1)
hommelFast(pval, simes = TRUE)
hommelFast(pval, simes = FALSE)
pval2 <- c(0.15, 1)
hommelFast(pval2, simes = TRUE)
hommelFast
load("C:/Users/Johannes/Projects/elastic/workflow-generator/output.json")
setwd("C:\Users\Johannes\Projects\elastic\workflow-generator")
setwd("C:\\Users\\Johannes\\Projects\\elastic\\workflow-generator")
install.packages("rjson")
library("rjson")
json_data <- fromJSON(paste(readLines("output.json"), collapse=""))
json_data <- fromJSON(paste(readLines("output.json"), collapse=""))
json_data <- fromJSON(file="output.json")
json_data
json_data[0]
json_data[1]
json_data[1][1]
json_data[1]#type
json_data[1]$type
json_data[1][1]$type
json_data[1][0]$type
json_data[1,1]$type
json_data[1][1]$type
json_data[1][1]
json_data[1][[1]]
json_data[1][[1]]$name
json_data[1][[1]]$delay
json_data[2][[1]]$delay
json_data[3][[1]]$delay
for (i in json_data) {
print i
}
for (i in json_data) {
print(i)
}
for (i in json_data) {
print(i)[[1]]$delay
}
for (i in json_data) {
print(i[[1]]$delay)
}
z <- i[[1]]
for (i in json_data) {
z <- i[[1]]
}
print(z)
z <- i[1]
for (i in json_data) {
z <- i[1]
print(z)
}
for (i in json_data) {
z <- i$delay
print(z)
}
delays <- 0
for (i in json_data) {
delays <- c(delays, i$delay)
}
print(delays)
delays <- numeric()
for (i in json_data) {
delays <- c(delays, i$delay)
}
print(delays)
stripchart(delays)
delays <- c(delays, i$delay / 1000)
delays <- numeric()
for (i in json_data) {
delays <- c(delays, i$delay / 1000)
}
stripchart(delays)
stripchart(delays, xlab="Delay in seconds")
